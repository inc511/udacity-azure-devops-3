name: $(Date:yyyyMMdd)$(Rev:.r)

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: thanhnd

variables:
  python.version: '3.8'
  azureServiceConnectionId: 'thanhnd'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'vm1_group'
        backendAzureRmStorageAccountName: 'thanhnd1'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests


    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
   # FakeRestAPI - Publish
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload fakerrestapi Package'
      artifact: drop-fakerestapi


    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 
      name: $(environmentName)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'thanhnd'
              appName: 'thanhnd-application-AppService'    
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
              deploymentMethod: auto
          #--------------------------------------------#    
          # Postman - Install Newman    
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: |
                sudo apt-get -y install npm
                sudo npm install -g newman
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          # Postman Data Validation Test Suite    
          - task: CmdLine@2
            displayName: Run Data Validation Tests
            continueOnError: true
            inputs:
              script: 'newman run data-test.json -e environment-test.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          # Postman Regression Test Suite    
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: 'newman run regression.json -e environment-test.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
          # Postman - Publish Results 
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              mergeTestResults: true
              testRunTitle: 'Publish test results'


        #--------------------------------------------#    
          # Jmeter - Install Jmeter
          - task: JMeterInstaller@0
            displayName: 'Install JMeter 5.2.1'
            inputs:
              jmeterVersion: '5.2.1'
          # Jmeter - Endurance Test Suite     
          - task: Bash@3
            displayName: 'Endurance Test Suite'
            inputs:
              targetType: 'inline'
              script: |
                jmeter -n \
                  -t EnduranceTest.jmx \
                  -l endurance-test-report/endurance-results.jtl \
                  -e \
                  -o endurance-test-report
          # Publish - Endurance Test Suite
          - task: publishhtmlreport@1
            displayName: 'Publish Endurance Test Results'
            inputs:
              htmlType: 'Jmeter'
              JmeterReportsPath: '$(Build.SourcesDirectory)/endurance-test-report'
          # Jmeter - Stress Test Suite    
          - task: Bash@3
            displayName: 'Stress Test Suite'
            inputs:
              targetType: 'inline'
              script: |
                jmeter -n \
                  -t StressTest.jmx \
                  -l stress-test-report/stress-results.jtl \
                  -e \
                  -o stress-test-report
          # Publish - Stress Test Suite
          - task: publishhtmlreport@1
            displayName: 'Publish Stress Test Results'
            inputs:
              htmlType: 'Jmeter'
              JmeterReportsPath: '$(Build.SourcesDirectory)/stress-test-report'   


          # Print Performance Test Logs
          - task: Bash@3
            displayName: 'Print Performance Test Logs'
            inputs:
              targetType: 'inline'
              script: |
                ls -lah endurance-test-report/
                ls -lah stress-test-report/
                cat jmeter.log
                
  - deployment: VMDeploy
    displayName: VMDeploy
    environment:
      name:  $(environmentName)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-driver
                sudo -H pip3 install --upgrade pip
                pip install -U selenium
                echo "python version:"
                python3 --version 
                export PATH=$PATH:/usr/bin/chromedriver
                # agent log analytics
            #env:  # To use secret variables in a script, we must explicitly map them as environment variables.
            #  AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
            #  AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
            #displayName: Configure VM           
    
- stage: Test
  jobs:
    - deployment: test_on_vm
      displayName: UI testing
      environment:
       name: $(environmentName)
       resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Bash@3
                inputs:
                 targetType: inline
                 script: |
                  #!/bin/bash
                  chromium-browser -version
                  chromedriver --version
                  cd $(Pipeline.Workspace)/drop-selenium
                  unzip -o $(Build.BuildId)-selenium.zip
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 664 /var/log/selenium
                  python3 test-ui.py > ui-logs.log
                  python3 test-ui.py
                  sudo mv ui-logs.log /var/log/selenium
                  cd $(System.DefaultWorkingDirectory)
                  mkdir -p log/selenium
                  sudo cp /var/log/selenium/ui-logs.log log/selenium
              - task: PublishPipelineArtifact@1
                displayName: Publish selenium logs
                inputs:
                  targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                  artifactName: 'drop-selenium-logs'
