name: $(Date:yyyyMMdd)$(Rev:.r)

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: thanhnd

variables:
  python.version: '3.8'
  azureServiceConnectionId: 'thanhnd'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.2.9'
    
    # Run Terraform Init on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'vm1_group'
        backendAzureRmStorageAccountName: 'thanhnd1'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo apt -y install npm && sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run data-test.json -e environment-test.json --reporters cli,junit --reporter-junit-export data-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run regression-test.json -e  environment-test.json --reporters cli,junit --reporter-junit-export regression-test.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**-test.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman tests result'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 
      name: $(environmentName)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'thanhnd'
              appName: 'thanhnd-application-AppService'    
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
              deploymentMethod: auto
              
  - deployment: VMDeploy
    displayName: VMDeploy
    environment:
      name:  $(environmentName)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-driver
                sudo -H pip3 install --upgrade pip
                pip install -U selenium
                echo "python version:"
                python3 --version 
                export PATH=$PATH:/usr/bin/chromedriver
                # agent log analytics
            #env:  # To use secret variables in a script, we must explicitly map them as environment variables.
            #  AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
            #  AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
            #displayName: Configure VM   
    
- stage: Test
  jobs:
    - deployment: test_on_vm
      displayName: UI testing
      environment:
       name: $(environmentName)
       resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
              - task: Bash@3
                inputs:
                 targetType: inline
                 script: |
                  #!/bin/bash
                  chromium-browser -version
                  chromedriver --version
                  cd $(Pipeline.Workspace)/drop-selenium
                  unzip -o $(Build.BuildId)-selenium.zip
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 664 /var/log/selenium
                  python3 test-ui.py > ui-logs.log
                  python3 test-ui.py
                  sudo mv ui-logs.log /var/log/selenium
                  cd $(System.DefaultWorkingDirectory)
                  mkdir -p log/selenium
                  sudo cp /var/log/selenium/ui-logs.log log/selenium
              - task: PublishPipelineArtifact@1
                displayName: Publish selenium logs
                inputs:
                  targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                  artifactName: 'drop-selenium-logs'
    - job: Test_Jmeter
      displayName: Performance testing
      pool:
        vmImage: 'Ubuntu-18.04'
      
      steps:
        - bash: |
            sudo apt-get install openjdk-11-jre-headless -y
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz -O jmeter.tgz
            tar xzvf jmeter.tgz
            echo "####################"
            echo "jmeter version : " 
            apache-jmeter-5.5/bin/jmeter --version   
            echo "####################"
            mkdir -p log/jmeter
            pwd
            ls -la
          displayName: Install JMeter
        - bash: |
            apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/StressTest.jmx -l log/jmeter/stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report -j log/jmeter/jmeter-stress-test.log
            cat log/jmeter/jmeter-stress-test.log
          displayName: JMeter stress test
        - bash: |
            apache-jmeter-5.5/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx -l log/jmeter/endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report -j log/jmeter/jmeter-endurance-test.log
            cat log/jmeter/jmeter-endurance-test.log
          displayName: JMeter endurance test
        - task: ArchiveFiles@2
          displayName: Publish Stress Test Results
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
            includeRootFolder: false
            archiveType: zip
            archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report.zip'
            verbose: true
        - task: ArchiveFiles@2
          displayName: Publish Endurance Test Results
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
            includeRootFolder: false
            archiveType: zip
            archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report.zip'
            verbose: true
        - task: PublishPipelineArtifact@1
          displayName: Publish JMeter logs
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
            artifact: drop-jmeter   

    - job: Test_Post_man
      displayName: Postman Test
      pool:
          vmImage: 'Ubuntu-18.04'
      steps: 
        - task: NodeTool@0
          displayName: Install Node v14.X
          inputs:
            versionSpec: '14.x'
        - bash: |
            node -v
            mkdir -p log/newman
            newman -v
          displayName: Install Newman CLI
        - bash: |
              newman run automatedtesting/postman/udacity-project3-ReTest.postman_collection.json -e automatedtesting/postman/Env.RegressionTest.postman_environment.json --reporters cli,junit --reporter-junit-export log/newman/RegressionTest.xml --suppress-exit-code
          displayName: Run Regression Test
        - bash: |
              newman run automatedtesting/postman/udacity-project3-ValTest.postman_collection.json -e automatedtesting/postman/Env.ValidationTest.postman_environment.json --reporters cli,junit --reporter-junit-export log/newman/ValidationTest.xml --suppress-exit-code
          displayName: Run Validation Test
        - task: PublishPipelineArtifact@1
          displayName: Publish Newman logs
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
            artifactName: 'drop-newman-logs'
        - task: PublishTestResults@2
          displayName: Publish report postman
          condition: always()
          inputs:
           testResultsFormat: JUnit
           testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/*.xml'
